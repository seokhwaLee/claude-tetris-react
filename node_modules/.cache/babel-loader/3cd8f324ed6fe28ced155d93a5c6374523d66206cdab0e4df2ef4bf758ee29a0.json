{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef } from 'react';\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 20;\nconst TETROMINOES = {\n  I: [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n  J: [[1, 0, 0], [1, 1, 1], [0, 0, 0]],\n  L: [[0, 0, 1], [1, 1, 1], [0, 0, 0]],\n  O: [[1, 1], [1, 1]],\n  S: [[0, 1, 1], [1, 1, 0], [0, 0, 0]],\n  T: [[0, 1, 0], [1, 1, 1], [0, 0, 0]],\n  Z: [[1, 1, 0], [0, 1, 1], [0, 0, 0]]\n};\nexport const useGameLogic = () => {\n  _s();\n  const [board, setBoard] = useState(() => Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0)));\n  const [currentPiece, setCurrentPiece] = useState(null);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [lines, setLines] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const gameLoopRef = useRef(null);\n  const checkCollision = useCallback((piece, board) => {\n    for (let y = 0; y < piece.shape.length; y++) {\n      for (let x = 0; x < piece.shape[y].length; x++) {\n        if (piece.shape[y][x] !== 0) {\n          const boardY = piece.position.y + y;\n          const boardX = piece.position.x + x;\n\n          // 천장에 닿았는지 확인\n          if (boardY < 0) {\n            setGameOver(true);\n            return true;\n          }\n          if (boardX < 0 || boardX >= BOARD_WIDTH || boardY >= BOARD_HEIGHT || board[boardY][boardX] !== 0) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }, [setGameOver]);\n  const createNewPiece = useCallback(() => {\n    const tetrominoTypes = Object.keys(TETROMINOES);\n    const randomType = tetrominoTypes[Math.floor(Math.random() * tetrominoTypes.length)];\n    const newPiece = {\n      shape: TETROMINOES[randomType],\n      position: {\n        x: Math.floor(BOARD_WIDTH / 2) - 1,\n        y: 0\n      }\n    };\n\n    // 새로운 블록이 생성될 때 충돌 체크\n    if (checkCollision(newPiece, board)) {\n      setGameOver(true);\n    }\n    return newPiece;\n  }, [board, checkCollision, setGameOver]);\n  const clearLines = useCallback(board => {\n    const newBoard = board.map(row => [...row]);\n    let linesCleared = 0;\n    let completedLines = [];\n\n    // 완성된 라인 찾기\n    for (let y = BOARD_HEIGHT - 1; y >= 0; y--) {\n      if (newBoard[y].every(cell => cell === 1)) {\n        completedLines.push(y);\n        linesCleared++;\n      }\n    }\n\n    // 완성된 라인 제거\n    for (const y of completedLines) {\n      newBoard.splice(y, 1);\n    }\n\n    // 새로운 빈 라인 추가\n    for (let i = 0; i < linesCleared; i++) {\n      newBoard.unshift(Array(BOARD_WIDTH).fill(0));\n    }\n    if (linesCleared > 0) {\n      setLines(prev => prev + linesCleared);\n      setScore(prev => prev + linesCleared * 100 * level);\n\n      // 10줄마다 레벨업\n      if (lines + linesCleared >= level * 10) {\n        setLevel(prev => prev + 1);\n      }\n    }\n    return newBoard;\n  }, [lines, level]);\n  const movePiece = useCallback(direction => {\n    if (!currentPiece || gameOver || isPaused) return;\n    const newPosition = {\n      ...currentPiece.position\n    };\n    switch (direction) {\n      case 'left':\n        newPosition.x -= 1;\n        break;\n      case 'right':\n        newPosition.x += 1;\n        break;\n      case 'down':\n        newPosition.y += 1;\n        break;\n    }\n    const newPiece = {\n      ...currentPiece,\n      position: newPosition\n    };\n    if (!checkCollision(newPiece, board)) {\n      setCurrentPiece(newPiece);\n    } else if (direction === 'down') {\n      const newBoard = board.map(row => [...row]);\n      for (let y = 0; y < currentPiece.shape.length; y++) {\n        for (let x = 0; x < currentPiece.shape[y].length; x++) {\n          if (currentPiece.shape[y][x] !== 0) {\n            const boardY = currentPiece.position.y + y;\n            const boardX = currentPiece.position.x + x;\n            if (boardY < 0) {\n              // 천장에 닿으면 게임오버\n              setGameOver(true);\n              return;\n            }\n            if (boardY >= 0) {\n              newBoard[boardY][boardX] = 1;\n            }\n          }\n        }\n      }\n      setBoard(newBoard);\n      const updatedBoard = clearLines(newBoard);\n      setBoard(updatedBoard);\n      setCurrentPiece(createNewPiece());\n    }\n  }, [currentPiece, board, checkCollision, createNewPiece, gameOver, isPaused, clearLines, setGameOver]);\n  const rotatePiece = useCallback(() => {\n    if (!currentPiece || gameOver || isPaused) return;\n\n    // 90도 회전: 행렬을 전치하고 각 행을 뒤집음\n    const newShape = currentPiece.shape[0].map((_, i) => currentPiece.shape.map(row => row[i]).reverse());\n    const newPiece = {\n      ...currentPiece,\n      shape: newShape\n    };\n    if (!checkCollision(newPiece, board)) {\n      setCurrentPiece(newPiece);\n    }\n  }, [currentPiece, board, checkCollision, gameOver, isPaused]);\n  const hardDrop = useCallback(() => {\n    if (!currentPiece || gameOver || isPaused) return;\n\n    // 게임 루프를 일시적으로 정지\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n    let newPosition = {\n      ...currentPiece.position\n    };\n    let dropDistance = 0;\n\n    // 블록이 바닥에 닿을 때까지의 거리를 계산\n    while (!checkCollision({\n      ...currentPiece,\n      position: {\n        ...newPosition,\n        y: newPosition.y + dropDistance + 1\n      }\n    }, board)) {\n      dropDistance++;\n    }\n\n    // 계산된 거리만큼 한 번에 이동\n    newPosition.y += dropDistance;\n\n    // 이동 후 바로 고정\n    const newBoard = board.map(row => [...row]);\n    for (let y = 0; y < currentPiece.shape.length; y++) {\n      for (let x = 0; x < currentPiece.shape[y].length; x++) {\n        if (currentPiece.shape[y][x] !== 0) {\n          const boardY = newPosition.y + y;\n          const boardX = newPosition.x + x;\n          if (boardY < 0) {\n            // 천장에 닿으면 게임오버\n            setGameOver(true);\n            return;\n          }\n          if (boardY >= 0) {\n            newBoard[boardY][boardX] = 1;\n          }\n        }\n      }\n    }\n    setBoard(newBoard);\n    const updatedBoard = clearLines(newBoard);\n    setBoard(updatedBoard);\n    setCurrentPiece(createNewPiece());\n\n    // 게임 루프 재시작\n    if (!gameOver && !isPaused) {\n      gameLoopRef.current = setInterval(() => {\n        movePiece('down');\n      }, 1000 / level);\n    }\n  }, [currentPiece, board, checkCollision, createNewPiece, gameOver, isPaused, level, movePiece, clearLines, setGameOver]);\n  useEffect(() => {\n    if (!currentPiece) {\n      const newPiece = createNewPiece();\n      setCurrentPiece(newPiece);\n    }\n  }, [currentPiece, createNewPiece]);\n  useEffect(() => {\n    // 기존 게임 루프 정리\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n    if (gameOver || isPaused) return;\n\n    // 새로운 게임 루프 시작\n    gameLoopRef.current = setInterval(() => {\n      movePiece('down');\n    }, 1000 / level);\n    return () => {\n      if (gameLoopRef.current) {\n        clearInterval(gameLoopRef.current);\n      }\n    };\n  }, [movePiece, level, gameOver, isPaused]);\n  const startGame = useCallback(() => {\n    // 게임 상태 초기화\n    setBoard(Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0)));\n    setScore(0);\n    setLines(0);\n    setLevel(1);\n    setGameOver(false);\n    setIsPaused(false);\n    setCurrentPiece(createNewPiece());\n\n    // 이전 게임 루프가 있다면 정지\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n\n    // 새로운 게임 루프 시작\n    gameLoopRef.current = setInterval(() => {\n      movePiece('down');\n    }, 1000 / level);\n  }, [createNewPiece, level, movePiece]);\n  const togglePause = useCallback(() => {\n    setIsPaused(prev => {\n      if (prev) {\n        // 일시정지 해제 시 게임 루프 재시작\n        if (gameLoopRef.current) {\n          clearInterval(gameLoopRef.current);\n        }\n        gameLoopRef.current = setInterval(() => {\n          movePiece('down');\n        }, 1000 / level);\n      } else {\n        // 일시정지 시 게임 루프 정지\n        if (gameLoopRef.current) {\n          clearInterval(gameLoopRef.current);\n        }\n      }\n      return !prev;\n    });\n  }, [movePiece, level]);\n  return {\n    board,\n    currentPiece,\n    score,\n    level,\n    lines,\n    gameOver,\n    isPaused,\n    movePiece,\n    rotatePiece,\n    hardDrop,\n    startGame,\n    togglePause\n  };\n};\n_s(useGameLogic, \"VW8UgiUhQwN1E2pfUWv8gKXC8WU=\");","map":{"version":3,"names":["useState","useCallback","useEffect","useRef","BOARD_WIDTH","BOARD_HEIGHT","TETROMINOES","I","J","L","O","S","T","Z","useGameLogic","_s","board","setBoard","Array","fill","map","currentPiece","setCurrentPiece","score","setScore","level","setLevel","lines","setLines","gameOver","setGameOver","isPaused","setIsPaused","gameLoopRef","checkCollision","piece","y","shape","length","x","boardY","position","boardX","createNewPiece","tetrominoTypes","Object","keys","randomType","Math","floor","random","newPiece","clearLines","newBoard","row","linesCleared","completedLines","every","cell","push","splice","i","unshift","prev","movePiece","direction","newPosition","updatedBoard","rotatePiece","newShape","_","reverse","hardDrop","current","clearInterval","dropDistance","setInterval","startGame","togglePause"],"sources":["/Users/aimmo-aiy-0297/Desktop/workspace/cursor-test/tetris/src/hooks/useGameLogic.ts"],"sourcesContent":["import { useState, useCallback, useEffect, useRef } from 'react';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface Tetromino {\n  shape: number[][];\n  position: Position;\n}\n\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 20;\n\nconst TETROMINOES = {\n  I: [\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n  ],\n  J: [\n    [1, 0, 0],\n    [1, 1, 1],\n    [0, 0, 0]\n  ],\n  L: [\n    [0, 0, 1],\n    [1, 1, 1],\n    [0, 0, 0]\n  ],\n  O: [\n    [1, 1],\n    [1, 1]\n  ],\n  S: [\n    [0, 1, 1],\n    [1, 1, 0],\n    [0, 0, 0]\n  ],\n  T: [\n    [0, 1, 0],\n    [1, 1, 1],\n    [0, 0, 0]\n  ],\n  Z: [\n    [1, 1, 0],\n    [0, 1, 1],\n    [0, 0, 0]\n  ]\n};\n\nexport const useGameLogic = () => {\n  const [board, setBoard] = useState<number[][]>(() => \n    Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0))\n  );\n  const [currentPiece, setCurrentPiece] = useState<Tetromino | null>(null);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [lines, setLines] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const gameLoopRef = useRef<NodeJS.Timeout | null>(null);\n\n  const checkCollision = useCallback((piece: Tetromino, board: number[][]) => {\n    for (let y = 0; y < piece.shape.length; y++) {\n      for (let x = 0; x < piece.shape[y].length; x++) {\n        if (piece.shape[y][x] !== 0) {\n          const boardY = piece.position.y + y;\n          const boardX = piece.position.x + x;\n          \n          // 천장에 닿았는지 확인\n          if (boardY < 0) {\n            setGameOver(true);\n            return true;\n          }\n          \n          if (\n            boardX < 0 ||\n            boardX >= BOARD_WIDTH ||\n            boardY >= BOARD_HEIGHT ||\n            board[boardY][boardX] !== 0\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }, [setGameOver]);\n\n  const createNewPiece = useCallback(() => {\n    const tetrominoTypes = Object.keys(TETROMINOES);\n    const randomType = tetrominoTypes[Math.floor(Math.random() * tetrominoTypes.length)];\n    const newPiece: Tetromino = {\n      shape: TETROMINOES[randomType as keyof typeof TETROMINOES],\n      position: { x: Math.floor(BOARD_WIDTH / 2) - 1, y: 0 }\n    };\n\n    // 새로운 블록이 생성될 때 충돌 체크\n    if (checkCollision(newPiece, board)) {\n      setGameOver(true);\n    }\n\n    return newPiece;\n  }, [board, checkCollision, setGameOver]);\n\n  const clearLines = useCallback((board: number[][]) => {\n    const newBoard = board.map(row => [...row]);\n    let linesCleared = 0;\n    let completedLines: number[] = [];\n\n    // 완성된 라인 찾기\n    for (let y = BOARD_HEIGHT - 1; y >= 0; y--) {\n      if (newBoard[y].every(cell => cell === 1)) {\n        completedLines.push(y);\n        linesCleared++;\n      }\n    }\n\n    // 완성된 라인 제거\n    for (const y of completedLines) {\n      newBoard.splice(y, 1);\n    }\n\n    // 새로운 빈 라인 추가\n    for (let i = 0; i < linesCleared; i++) {\n      newBoard.unshift(Array(BOARD_WIDTH).fill(0));\n    }\n\n    if (linesCleared > 0) {\n      setLines(prev => prev + linesCleared);\n      setScore(prev => prev + (linesCleared * 100 * level));\n      \n      // 10줄마다 레벨업\n      if (lines + linesCleared >= level * 10) {\n        setLevel(prev => prev + 1);\n      }\n    }\n\n    return newBoard;\n  }, [lines, level]);\n\n  const movePiece = useCallback((direction: 'left' | 'right' | 'down') => {\n    if (!currentPiece || gameOver || isPaused) return;\n\n    const newPosition = { ...currentPiece.position };\n    switch (direction) {\n      case 'left':\n        newPosition.x -= 1;\n        break;\n      case 'right':\n        newPosition.x += 1;\n        break;\n      case 'down':\n        newPosition.y += 1;\n        break;\n    }\n\n    const newPiece = { ...currentPiece, position: newPosition };\n    if (!checkCollision(newPiece, board)) {\n      setCurrentPiece(newPiece);\n    } else if (direction === 'down') {\n      const newBoard = board.map(row => [...row]);\n      for (let y = 0; y < currentPiece.shape.length; y++) {\n        for (let x = 0; x < currentPiece.shape[y].length; x++) {\n          if (currentPiece.shape[y][x] !== 0) {\n            const boardY = currentPiece.position.y + y;\n            const boardX = currentPiece.position.x + x;\n            if (boardY < 0) {\n              // 천장에 닿으면 게임오버\n              setGameOver(true);\n              return;\n            }\n            if (boardY >= 0) {\n              newBoard[boardY][boardX] = 1;\n            }\n          }\n        }\n      }\n      setBoard(newBoard);\n      const updatedBoard = clearLines(newBoard);\n      setBoard(updatedBoard);\n      setCurrentPiece(createNewPiece());\n    }\n  }, [currentPiece, board, checkCollision, createNewPiece, gameOver, isPaused, clearLines, setGameOver]);\n\n  const rotatePiece = useCallback(() => {\n    if (!currentPiece || gameOver || isPaused) return;\n\n    // 90도 회전: 행렬을 전치하고 각 행을 뒤집음\n    const newShape = currentPiece.shape[0].map((_, i) =>\n      currentPiece.shape.map(row => row[i]).reverse()\n    );\n\n    const newPiece = { ...currentPiece, shape: newShape };\n    if (!checkCollision(newPiece, board)) {\n      setCurrentPiece(newPiece);\n    }\n  }, [currentPiece, board, checkCollision, gameOver, isPaused]);\n\n  const hardDrop = useCallback(() => {\n    if (!currentPiece || gameOver || isPaused) return;\n\n    // 게임 루프를 일시적으로 정지\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n\n    let newPosition = { ...currentPiece.position };\n    let dropDistance = 0;\n\n    // 블록이 바닥에 닿을 때까지의 거리를 계산\n    while (!checkCollision({ ...currentPiece, position: { ...newPosition, y: newPosition.y + dropDistance + 1 } }, board)) {\n      dropDistance++;\n    }\n\n    // 계산된 거리만큼 한 번에 이동\n    newPosition.y += dropDistance;\n    \n    // 이동 후 바로 고정\n    const newBoard = board.map(row => [...row]);\n    for (let y = 0; y < currentPiece.shape.length; y++) {\n      for (let x = 0; x < currentPiece.shape[y].length; x++) {\n        if (currentPiece.shape[y][x] !== 0) {\n          const boardY = newPosition.y + y;\n          const boardX = newPosition.x + x;\n          if (boardY < 0) {\n            // 천장에 닿으면 게임오버\n            setGameOver(true);\n            return;\n          }\n          if (boardY >= 0) {\n            newBoard[boardY][boardX] = 1;\n          }\n        }\n      }\n    }\n    setBoard(newBoard);\n    const updatedBoard = clearLines(newBoard);\n    setBoard(updatedBoard);\n    setCurrentPiece(createNewPiece());\n\n    // 게임 루프 재시작\n    if (!gameOver && !isPaused) {\n      gameLoopRef.current = setInterval(() => {\n        movePiece('down');\n      }, 1000 / level);\n    }\n  }, [currentPiece, board, checkCollision, createNewPiece, gameOver, isPaused, level, movePiece, clearLines, setGameOver]);\n\n  useEffect(() => {\n    if (!currentPiece) {\n      const newPiece = createNewPiece();\n      setCurrentPiece(newPiece);\n    }\n  }, [currentPiece, createNewPiece]);\n\n  useEffect(() => {\n    // 기존 게임 루프 정리\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n\n    if (gameOver || isPaused) return;\n\n    // 새로운 게임 루프 시작\n    gameLoopRef.current = setInterval(() => {\n      movePiece('down');\n    }, 1000 / level);\n\n    return () => {\n      if (gameLoopRef.current) {\n        clearInterval(gameLoopRef.current);\n      }\n    };\n  }, [movePiece, level, gameOver, isPaused]);\n\n  const startGame = useCallback(() => {\n    // 게임 상태 초기화\n    setBoard(Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0)));\n    setScore(0);\n    setLines(0);\n    setLevel(1);\n    setGameOver(false);\n    setIsPaused(false);\n    setCurrentPiece(createNewPiece());\n\n    // 이전 게임 루프가 있다면 정지\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n\n    // 새로운 게임 루프 시작\n    gameLoopRef.current = setInterval(() => {\n      movePiece('down');\n    }, 1000 / level);\n  }, [createNewPiece, level, movePiece]);\n\n  const togglePause = useCallback(() => {\n    setIsPaused(prev => {\n      if (prev) {\n        // 일시정지 해제 시 게임 루프 재시작\n        if (gameLoopRef.current) {\n          clearInterval(gameLoopRef.current);\n        }\n        gameLoopRef.current = setInterval(() => {\n          movePiece('down');\n        }, 1000 / level);\n      } else {\n        // 일시정지 시 게임 루프 정지\n        if (gameLoopRef.current) {\n          clearInterval(gameLoopRef.current);\n        }\n      }\n      return !prev;\n    });\n  }, [movePiece, level]);\n\n  return {\n    board,\n    currentPiece,\n    score,\n    level,\n    lines,\n    gameOver,\n    isPaused,\n    movePiece,\n    rotatePiece,\n    hardDrop,\n    startGame,\n    togglePause\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}