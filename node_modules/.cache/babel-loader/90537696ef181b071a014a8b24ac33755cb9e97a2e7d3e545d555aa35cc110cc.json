{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef } from 'react';\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 20;\nconst TETROMINOES = {\n  I: [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n  J: [[1, 0, 0], [1, 1, 1], [0, 0, 0]],\n  L: [[0, 0, 1], [1, 1, 1], [0, 0, 0]],\n  O: [[1, 1], [1, 1]],\n  S: [[0, 1, 1], [1, 1, 0], [0, 0, 0]],\n  T: [[0, 1, 0], [1, 1, 1], [0, 0, 0]],\n  Z: [[1, 1, 0], [0, 1, 1], [0, 0, 0]]\n};\nexport const useGameLogic = () => {\n  _s();\n  const [board, setBoard] = useState(() => Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0)));\n  const [currentPiece, setCurrentPiece] = useState(null);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [lines, setLines] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const gameLoopRef = useRef(null);\n  const createNewPiece = useCallback(() => {\n    const tetrominoTypes = Object.keys(TETROMINOES);\n    const randomType = tetrominoTypes[Math.floor(Math.random() * tetrominoTypes.length)];\n    const newPiece = {\n      shape: TETROMINOES[randomType],\n      position: {\n        x: Math.floor(BOARD_WIDTH / 2) - 1,\n        y: 0\n      }\n    };\n    return newPiece;\n  }, []);\n  const checkCollision = useCallback((piece, board) => {\n    for (let y = 0; y < piece.shape.length; y++) {\n      for (let x = 0; x < piece.shape[y].length; x++) {\n        if (piece.shape[y][x] === 0) continue;\n        const boardX = piece.position.x + x;\n        const boardY = piece.position.y + y;\n        if (boardX < 0 || boardX >= BOARD_WIDTH || boardY >= BOARD_HEIGHT || boardY >= 0 && board[boardY][boardX] !== 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }, []);\n  const movePiece = useCallback(direction => {\n    if (!currentPiece || gameOver || isPaused) return;\n    const newPosition = {\n      ...currentPiece.position\n    };\n    switch (direction) {\n      case 'left':\n        newPosition.x -= 1;\n        break;\n      case 'right':\n        newPosition.x += 1;\n        break;\n      case 'down':\n        newPosition.y += 1;\n        break;\n    }\n    const newPiece = {\n      ...currentPiece,\n      position: newPosition\n    };\n    if (!checkCollision(newPiece, board)) {\n      setCurrentPiece(newPiece);\n    } else if (direction === 'down') {\n      const newBoard = board.map(row => [...row]);\n      for (let y = 0; y < currentPiece.shape.length; y++) {\n        for (let x = 0; x < currentPiece.shape[y].length; x++) {\n          if (currentPiece.shape[y][x] !== 0) {\n            const boardY = currentPiece.position.y + y;\n            const boardX = currentPiece.position.x + x;\n            if (boardY >= 0) {\n              newBoard[boardY][boardX] = 1;\n            }\n          }\n        }\n      }\n      setBoard(newBoard);\n      setCurrentPiece(createNewPiece());\n    }\n  }, [currentPiece, board, checkCollision, createNewPiece, gameOver, isPaused]);\n  const rotatePiece = useCallback(() => {\n    if (!currentPiece || gameOver || isPaused) return;\n    const newShape = currentPiece.shape[0].map((_, i) => currentPiece.shape.map(row => row[i]).reverse());\n    const newPiece = {\n      ...currentPiece,\n      shape: newShape\n    };\n    if (!checkCollision(newPiece, board)) {\n      setCurrentPiece(newPiece);\n    }\n  }, [currentPiece, board, checkCollision, gameOver, isPaused]);\n  const hardDrop = useCallback(() => {\n    if (!currentPiece || gameOver || isPaused) return;\n    let newPosition = {\n      ...currentPiece.position\n    };\n    while (!checkCollision({\n      ...currentPiece,\n      position: newPosition\n    }, board)) {\n      newPosition.y += 1;\n    }\n    newPosition.y -= 1;\n    setCurrentPiece({\n      ...currentPiece,\n      position: newPosition\n    });\n    movePiece('down');\n  }, [currentPiece, board, checkCollision, movePiece, gameOver, isPaused]);\n  const clearLines = useCallback(() => {\n    const newBoard = board.filter(row => row.some(cell => cell === 0));\n    const linesCleared = BOARD_HEIGHT - newBoard.length;\n    if (linesCleared > 0) {\n      const newLines = Array(linesCleared).fill(null).map(() => Array(BOARD_WIDTH).fill(0));\n      setBoard([...newLines, ...newBoard]);\n      setLines(prev => prev + linesCleared);\n      setScore(prev => prev + linesCleared * 100 * level);\n\n      // 10줄마다 레벨업\n      if (lines + linesCleared >= level * 10) {\n        setLevel(prev => prev + 1);\n      }\n    }\n  }, [board, lines, level]);\n  useEffect(() => {\n    if (!currentPiece) {\n      setCurrentPiece(createNewPiece());\n    }\n  }, [currentPiece, createNewPiece]);\n  useEffect(() => {\n    // 기존 게임 루프 정리\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n    if (gameOver || isPaused) return;\n\n    // 새로운 게임 루프 시작\n    gameLoopRef.current = setInterval(() => {\n      movePiece('down');\n      clearLines();\n    }, 1000 / level);\n    return () => {\n      if (gameLoopRef.current) {\n        clearInterval(gameLoopRef.current);\n      }\n    };\n  }, [movePiece, clearLines, level, gameOver, isPaused]);\n  const startGame = useCallback(() => {\n    // 기존 게임 루프 정리\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n\n    // 게임 상태 초기화\n    setBoard(Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0)));\n    setScore(0);\n    setLevel(1);\n    setLines(0);\n    setGameOver(false);\n    setIsPaused(false);\n    setCurrentPiece(createNewPiece());\n\n    // 새로운 게임 루프 시작\n    gameLoopRef.current = setInterval(() => {\n      movePiece('down');\n      clearLines();\n    }, 1000 / level);\n  }, [createNewPiece, movePiece, clearLines, level]);\n  const togglePause = useCallback(() => {\n    setIsPaused(prev => {\n      if (prev) {\n        // 일시정지 해제 시 게임 루프 재시작\n        if (gameLoopRef.current) {\n          clearInterval(gameLoopRef.current);\n        }\n        gameLoopRef.current = setInterval(() => {\n          movePiece('down');\n          clearLines();\n        }, 1000 / level);\n      } else {\n        // 일시정지 시 게임 루프 정지\n        if (gameLoopRef.current) {\n          clearInterval(gameLoopRef.current);\n        }\n      }\n      return !prev;\n    });\n  }, [movePiece, clearLines, level]);\n  return {\n    board,\n    currentPiece,\n    score,\n    level,\n    lines,\n    gameOver,\n    isPaused,\n    movePiece,\n    rotatePiece,\n    hardDrop,\n    startGame,\n    togglePause\n  };\n};\n_s(useGameLogic, \"c4R0DElaeFDqiMym/5AiddD0kKw=\");","map":{"version":3,"names":["useState","useCallback","useEffect","useRef","BOARD_WIDTH","BOARD_HEIGHT","TETROMINOES","I","J","L","O","S","T","Z","useGameLogic","_s","board","setBoard","Array","fill","map","currentPiece","setCurrentPiece","score","setScore","level","setLevel","lines","setLines","gameOver","setGameOver","isPaused","setIsPaused","gameLoopRef","createNewPiece","tetrominoTypes","Object","keys","randomType","Math","floor","random","length","newPiece","shape","position","x","y","checkCollision","piece","boardX","boardY","movePiece","direction","newPosition","newBoard","row","rotatePiece","newShape","_","i","reverse","hardDrop","clearLines","filter","some","cell","linesCleared","newLines","prev","current","clearInterval","setInterval","startGame","togglePause"],"sources":["/Users/aimmo-aiy-0297/Desktop/workspace/cursor-test/tetris/src/hooks/useGameLogic.ts"],"sourcesContent":["import { useState, useCallback, useEffect, useRef } from 'react';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface Tetromino {\n  shape: number[][];\n  position: Position;\n}\n\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 20;\n\nconst TETROMINOES = {\n  I: [\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n  ],\n  J: [\n    [1, 0, 0],\n    [1, 1, 1],\n    [0, 0, 0]\n  ],\n  L: [\n    [0, 0, 1],\n    [1, 1, 1],\n    [0, 0, 0]\n  ],\n  O: [\n    [1, 1],\n    [1, 1]\n  ],\n  S: [\n    [0, 1, 1],\n    [1, 1, 0],\n    [0, 0, 0]\n  ],\n  T: [\n    [0, 1, 0],\n    [1, 1, 1],\n    [0, 0, 0]\n  ],\n  Z: [\n    [1, 1, 0],\n    [0, 1, 1],\n    [0, 0, 0]\n  ]\n};\n\nexport const useGameLogic = () => {\n  const [board, setBoard] = useState<number[][]>(() => \n    Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0))\n  );\n  const [currentPiece, setCurrentPiece] = useState<Tetromino | null>(null);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [lines, setLines] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const gameLoopRef = useRef<NodeJS.Timeout | null>(null);\n\n  const createNewPiece = useCallback(() => {\n    const tetrominoTypes = Object.keys(TETROMINOES);\n    const randomType = tetrominoTypes[Math.floor(Math.random() * tetrominoTypes.length)];\n    const newPiece: Tetromino = {\n      shape: TETROMINOES[randomType as keyof typeof TETROMINOES],\n      position: { x: Math.floor(BOARD_WIDTH / 2) - 1, y: 0 }\n    };\n    return newPiece;\n  }, []);\n\n  const checkCollision = useCallback((piece: Tetromino, board: number[][]) => {\n    for (let y = 0; y < piece.shape.length; y++) {\n      for (let x = 0; x < piece.shape[y].length; x++) {\n        if (piece.shape[y][x] === 0) continue;\n        \n        const boardX = piece.position.x + x;\n        const boardY = piece.position.y + y;\n        \n        if (\n          boardX < 0 ||\n          boardX >= BOARD_WIDTH ||\n          boardY >= BOARD_HEIGHT ||\n          (boardY >= 0 && board[boardY][boardX] !== 0)\n        ) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }, []);\n\n  const movePiece = useCallback((direction: 'left' | 'right' | 'down') => {\n    if (!currentPiece || gameOver || isPaused) return;\n\n    const newPosition = { ...currentPiece.position };\n    switch (direction) {\n      case 'left':\n        newPosition.x -= 1;\n        break;\n      case 'right':\n        newPosition.x += 1;\n        break;\n      case 'down':\n        newPosition.y += 1;\n        break;\n    }\n\n    const newPiece = { ...currentPiece, position: newPosition };\n    if (!checkCollision(newPiece, board)) {\n      setCurrentPiece(newPiece);\n    } else if (direction === 'down') {\n      const newBoard = board.map(row => [...row]);\n      for (let y = 0; y < currentPiece.shape.length; y++) {\n        for (let x = 0; x < currentPiece.shape[y].length; x++) {\n          if (currentPiece.shape[y][x] !== 0) {\n            const boardY = currentPiece.position.y + y;\n            const boardX = currentPiece.position.x + x;\n            if (boardY >= 0) {\n              newBoard[boardY][boardX] = 1;\n            }\n          }\n        }\n      }\n      setBoard(newBoard);\n      setCurrentPiece(createNewPiece());\n    }\n  }, [currentPiece, board, checkCollision, createNewPiece, gameOver, isPaused]);\n\n  const rotatePiece = useCallback(() => {\n    if (!currentPiece || gameOver || isPaused) return;\n\n    const newShape = currentPiece.shape[0].map((_, i) =>\n      currentPiece.shape.map(row => row[i]).reverse()\n    );\n\n    const newPiece = { ...currentPiece, shape: newShape };\n    if (!checkCollision(newPiece, board)) {\n      setCurrentPiece(newPiece);\n    }\n  }, [currentPiece, board, checkCollision, gameOver, isPaused]);\n\n  const hardDrop = useCallback(() => {\n    if (!currentPiece || gameOver || isPaused) return;\n\n    let newPosition = { ...currentPiece.position };\n    while (!checkCollision({ ...currentPiece, position: newPosition }, board)) {\n      newPosition.y += 1;\n    }\n    newPosition.y -= 1;\n    setCurrentPiece({ ...currentPiece, position: newPosition });\n    movePiece('down');\n  }, [currentPiece, board, checkCollision, movePiece, gameOver, isPaused]);\n\n  const clearLines = useCallback(() => {\n    const newBoard = board.filter(row => row.some(cell => cell === 0));\n    const linesCleared = BOARD_HEIGHT - newBoard.length;\n    if (linesCleared > 0) {\n      const newLines = Array(linesCleared).fill(null).map(() => Array(BOARD_WIDTH).fill(0));\n      setBoard([...newLines, ...newBoard]);\n      setLines(prev => prev + linesCleared);\n      setScore(prev => prev + (linesCleared * 100 * level));\n      \n      // 10줄마다 레벨업\n      if (lines + linesCleared >= level * 10) {\n        setLevel(prev => prev + 1);\n      }\n    }\n  }, [board, lines, level]);\n\n  useEffect(() => {\n    if (!currentPiece) {\n      setCurrentPiece(createNewPiece());\n    }\n  }, [currentPiece, createNewPiece]);\n\n  useEffect(() => {\n    // 기존 게임 루프 정리\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n\n    if (gameOver || isPaused) return;\n\n    // 새로운 게임 루프 시작\n    gameLoopRef.current = setInterval(() => {\n      movePiece('down');\n      clearLines();\n    }, 1000 / level);\n\n    return () => {\n      if (gameLoopRef.current) {\n        clearInterval(gameLoopRef.current);\n      }\n    };\n  }, [movePiece, clearLines, level, gameOver, isPaused]);\n\n  const startGame = useCallback(() => {\n    // 기존 게임 루프 정리\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n\n    // 게임 상태 초기화\n    setBoard(Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0)));\n    setScore(0);\n    setLevel(1);\n    setLines(0);\n    setGameOver(false);\n    setIsPaused(false);\n    setCurrentPiece(createNewPiece());\n\n    // 새로운 게임 루프 시작\n    gameLoopRef.current = setInterval(() => {\n      movePiece('down');\n      clearLines();\n    }, 1000 / level);\n  }, [createNewPiece, movePiece, clearLines, level]);\n\n  const togglePause = useCallback(() => {\n    setIsPaused(prev => {\n      if (prev) {\n        // 일시정지 해제 시 게임 루프 재시작\n        if (gameLoopRef.current) {\n          clearInterval(gameLoopRef.current);\n        }\n        gameLoopRef.current = setInterval(() => {\n          movePiece('down');\n          clearLines();\n        }, 1000 / level);\n      } else {\n        // 일시정지 시 게임 루프 정지\n        if (gameLoopRef.current) {\n          clearInterval(gameLoopRef.current);\n        }\n      }\n      return !prev;\n    });\n  }, [movePiece, clearLines, level]);\n\n  return {\n    board,\n    currentPiece,\n    score,\n    level,\n    lines,\n    gameOver,\n    isPaused,\n    movePiece,\n    rotatePiece,\n    hardDrop,\n    startGame,\n    togglePause\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}